// import React from 'react'
// import FullCalendar, { EventApi, DateSelectArg, EventClickArg, EventContentArg, formatDate } from '@fullcalendar/react'
// import dayGridPlugin from '@fullcalendar/daygrid'
// import timeGridPlugin from '@fullcalendar/timegrid'
// import interactionPlugin from '@fullcalendar/interaction'
// import { INITIAL_EVENTS, createEventId } from './event-utils'
// import '@fullcalendar/react/dist/vdom';
// import { toast } from 'react-toastify'

// interface FullCalenderState {
//   weekendsVisible: boolean
//   currentEvents: EventApi[]
// }

// export default class FullCalenderComponent extends React.Component<{}, FullCalenderState> {

//   state: FullCalenderState = {
//     weekendsVisible: false,
//     currentEvents: []
//   }

//   calendarOptions = {
//     plugins: [dayGridPlugin],
//     initialView: 'dayGridMonth'
//   };

//   render() {
//     return (
//       <div className='demo-app'>
//         <div className='demo-app-main'>
//           <FullCalendar
//             plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}
//             headerToolbar={{
//               left: 'prev,next today',
//               center: 'title',
//               right: 'dayGridMonth'
//             }}
//             initialView='dayGridMonth'
//             editable={false}
//             selectable={true}
//             selectMirror={true}
//             dayMaxEvents={false}
//             weekends={this.state.weekendsVisible}
//             initialEvents={INITIAL_EVENTS} // alternatively, use the `events` setting to fetch from a feed
//             select={this.handleDateSelect}
//             eventContent={renderEventContent} // custom render function
//             eventClick={this.handleEventClick}
//             eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed
//           />
//         </div>
//       </div>
//     )
//   }

//   renderSidebar() {
//     return (
//       <div className='demo-app-sidebar'>
//         <div className='demo-app-sidebar-section'>
//           <h2>Instructions</h2>
//           <ul>
//             <li>Select dates and you will be prompted to create a new event</li>
//             <li>Drag, drop, and resize events</li>
//             <li>Click an event to delete it</li>
//           </ul>
//         </div>
//         <div className='demo-app-sidebar-section'>
//           <label>
//             <input
//               type='checkbox'
//               checked={this.state.weekendsVisible}
//               onChange={this.handleWeekendsToggle}
//             ></input>
//             toggle weekends
//           </label>
//         </div>
//         <div className='demo-app-sidebar-section'>
//           <h2>All Events ({this.state.currentEvents.length})</h2>
//           <ul>
//             {this.state.currentEvents.map(renderSidebarEvent)}
//           </ul>
//         </div>
//       </div>
//     )
//   }

//   handleWeekendsToggle = () => {
//     this.setState({
//       weekendsVisible: !this.state.weekendsVisible
//     })
//   }

//   handleDateSelect = (selectInfo: DateSelectArg) => {
//     toast.info('Soon')
//   }

//   handleEventClick = (clickInfo: EventClickArg) => {
//     if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {
//       clickInfo.event.remove()
//     }
//   }

//   handleEvents = (events: EventApi[]) => {
//     this.setState({
//       currentEvents: events
//     })
//   }

// }

// function renderEventContent(eventContent: EventContentArg) {
//   return (
//     <>
//      <div className="event-item-calender cp">
//         <span>{eventContent.event.title}</span>
//         <span>{}</span>
//      </div>
//     </>
//   )
// }

// function renderSidebarEvent(event: EventApi) {
//   return (
//     <li key={event.id}>
//       <b>{formatDate(event.start!, {year: 'numeric', month: 'short', day: 'numeric'})}</b>
//       <i>{event.title}</i>
//     </li>
//   )
// }
